{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Redundant return" #-}
{-# HLINT ignore "Move brackets to avoid $" #-}
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Prelude
import qualified Data.Aeson as Aeson
import qualified Data.ByteString.Lazy as BL
import GetWeather ( Weather(..), Location(..), Current(..), getWeatherData )
import GoogleLLM ( generateContent )
import GHC.Generics ( Generic )
import Data.List (find,intercalate)
import Data.List.Split (splitOn)
import Data.Maybe (fromMaybe)
import Data.Aeson (decode)
import Data.Time


data MealPreference = MealPreference
  { time :: String
  , preferred_cuisines :: [String]
  } deriving (Show, Generic)

instance Aeson.FromJSON MealPreference

data FoodPreferences = FoodPreferences {
  temperature :: String,
  preferred_foods :: [String]
} deriving (Show, Generic)

instance Aeson.FromJSON FoodPreferences

-- get json valus of preferred cuisine from json file
getPreferredCuisines :: String -> IO (Maybe [String])
getPreferredCuisines time = do
    contents <- BL.readFile "data/meal_preferences.json"
    let preferences = decode contents :: Maybe [MealPreference]
    return (lookup time (map (\p -> (Main.time p, preferred_cuisines p)) (fromMaybe [] preferences)))

-- get json values of preferred foods from json file
getFoodPreferences :: String -> IO (Maybe FoodPreferences)
getFoodPreferences filename = do
  contents <- BL.readFile "data/food_preferences.json"
  let preferences = decode contents :: Maybe [FoodPreferences]
  return (find (\p -> temperature p == "Below 10°C") (fromMaybe [] preferences))

jsonFile :: FilePath
jsonFile = "data/meal_preferences.json"

getJSON :: IO BL.ByteString
getJSON = BL.readFile jsonFile

splitDateAndTime :: String -> String
splitDateAndTime dateTime = last $ splitOn " " dateTime

main :: IO ()
main = do
    weather <- getWeatherData
    case weather of
        Just w -> do
            let currentTime = localtime $ location w
            let dateTime = currentTime
            let time = splitDateAndTime dateTime
            let currentTemp = temp_c $ current w
            putStrLn $ "Current Temperature: " ++ show currentTemp
            -- Get preferred cuisines
            let time = currentTime
            let timeRange = if time >= "06:00" && time <= "10:00" then "06:00 - 10:00" else
                            if time >= "10:00" && time <= "11:00" then "10:00 - 11:00" else
                            if time >= "11:00" && time <= "14:00" then "11:00 - 14:00" else
                            if time >= "15:00" && time <= "18:00" then "15:00 - 18:00" else
                            if time >= "18:00" && time <= "21:00" then "18:00 - 21:00" else "NA"
            cuisines <- getPreferredCuisines timeRange
            let flatCuisines = concat cuisines
            putStrLn $ "Preferred cuisines: " ++ intercalate ", " flatCuisines
            -- Get preferred_foods from the weather data based on the current temperature 
            let temp = if currentTemp < 10 then "Below 10°C" else
                       if currentTemp >= 10 && currentTemp < 20 then "10°C - 25°C" else
                       if currentTemp >= 20 && currentTemp < 30 then "Above 25°C" else "NA"
            prefs <- getFoodPreferences "Below 10°C"
            case prefs of
                Just p -> do
                    putStrLn $ "Preferred Foods: " ++ show (preferred_foods p)
                Nothing -> putStrLn "Could not get food preferences"

    -- Request for the content generated by the Google LLM
    resContent <- generateContent 
    -- Write the content to a file
    let lazyContent = BL.fromStrict resContent
    BL.writeFile "data/GoogleLLM.json" lazyContent