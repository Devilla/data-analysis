{-# OPTIONS_GHC -Wno-unrecognised-pragmas #-}
{-# HLINT ignore "Redundant return" #-}
{-# HLINT ignore "Move brackets to avoid $" #-}
{-# LANGUAGE DeriveGeneric #-}

module Main where

import Prelude
-- import SerpAPI ( getFromSerpApi )
import qualified Data.Aeson as Aeson
import qualified Data.ByteString.Lazy as BL
import GetWeather ( Weather(..), Location(..), Current(..), getWeatherData )
-- import BillboardAPI ( getBillboardData )
-- import ParsePreferences ( FoodPreferences(..), getFoodPreferences )
import GoogleLLM ( generateContent )
import GHC.Generics ( Generic )
import Data.List (find,intercalate)
import Data.List.Split (splitOn)
-- import Data.Maybe (fromJust)
import Data.Maybe (fromMaybe)
import Data.Aeson (decode)

-- import GoogleLLM (generateContent)
data MealPreference = MealPreference
  { time :: String
  , preferred_cuisines :: [String]
  } deriving (Show, Generic)

instance Aeson.FromJSON MealPreference

-- get json valus of preferred cuisine from json file
getPreferredCuisines :: String -> IO (Maybe [String])
getPreferredCuisines time = do
    contents <- BL.readFile "data/meal_preferences.json"
    let preferences = decode contents :: Maybe [MealPreference]
    return (lookup time (map (\p -> (Main.time p, preferred_cuisines p)) (fromMaybe [] preferences)))

jsonFile :: FilePath
jsonFile = "data/meal_preferences.json"

getJSON :: IO BL.ByteString
getJSON = BL.readFile jsonFile

splitDateAndTime :: String -> String
splitDateAndTime dateTime = last $ splitOn " " dateTime

main :: IO ()
main = do
    weather <- getWeatherData
    case weather of
        Just w -> do
            let currentTime = localtime $ location w
            let dateTime = currentTime
            let time = splitDateAndTime dateTime
            let currentTemp = temp_c $ current w
            putStrLn $ "Current Time in New York: " ++ time
            putStrLn $ "Current Temperature in New York: " ++ show currentTemp
        Nothing -> putStrLn "Could not get weather data"

    -- Get preferred cuisines print
    cuisines <- getPreferredCuisines "06:00 - 10:00"
    let flatCuisines = concat cuisines
    putStrLn $ "Preferred cuisines: " ++ intercalate ", " flatCuisines


    -- Request for the Billboard top 10 artists and their hometown
    -- resArtists <- getFromSerpxApi "Billboard top 10 artists and their hometown"
    -- -- Convert resArtists into a JSON ByteString
    -- let jsonArtists = Aeson.encode resArtists
    -- -- Write the JSON ByteString to a file
    -- BL.writeFile "data/top_artists.json" jsonArtists

    -- Get food preferences 
    -- prefs <- getFoodPreferences
    -- case prefs of
    --     Just p -> do
    --         putStrLn $ "Preferred Foods: " ++ show (preferred_foods p)
    --         putStrLn $ "Preferred Cuisines: " ++ show (preferred_cuisines p)
    --         putStrLn $ "Max Calories: " ++ show (max_calories p)
    --     Nothing -> putStrLn "Could not get food preferences"

    -- Request for the content generated by the Google LLM
    resContent <- generateContent
    -- Write the content to a file
    let lazyContent = BL.fromStrict resContent
    BL.writeFile "data/GoogleLLM.json" lazyContent